/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Thu May  3 12:19:59 UTC 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkAttempt.h"


/* Constructor */
MOD_mkAttempt::MOD_mkAttempt(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_ctr(simHdl, "ctr", this, 3u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 2u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkAttempt::init_symbols_0()
{
  init_symbol(&symbols[0u], "ctr", SYM_MODULE, &INST_ctr);
  init_symbol(&symbols[1u], "RL_say_hello", SYM_RULE);
}


/* Rule actions */

void MOD_mkAttempt::RL_say_hello()
{
  tUInt8 DEF_ctr_PLUS_1___d2;
  tUInt8 DEF_ctr_EQ_4___d4;
  tUInt8 DEF_b__h91;
  tUInt8 DEF_unsigned_ctr___d3;
  DEF_b__h91 = INST_ctr.METH_read();
  DEF_unsigned_ctr___d3 = DEF_b__h91;
  DEF_ctr_EQ_4___d4 = DEF_b__h91 == (tUInt8)4u;
  DEF_ctr_PLUS_1___d2 = (tUInt8)7u & (DEF_b__h91 + (tUInt8)1u);
  INST_ctr.METH_write(DEF_ctr_PLUS_1___d2);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "3", DEF_unsigned_ctr___d3);
    if (DEF_ctr_EQ_4___d4)
      dollar_finish(sim_hdl, "32", 0u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkAttempt::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_ctr.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkAttempt::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkAttempt::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_ctr.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkAttempt::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 2u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_ctr.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkAttempt::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkAttempt &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkAttempt::vcd_defs(tVCDDumpType dt, MOD_mkAttempt &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkAttempt::vcd_prims(tVCDDumpType dt, MOD_mkAttempt &backing)
{
  INST_ctr.dump_VCD(dt, backing.INST_ctr);
}
