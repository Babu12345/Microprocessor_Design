/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sat May  5 14:25:01 UTC 2018
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkGCDtb.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkGCDtb::MODEL_mkGCDtb()
{
  mkGCDtb_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkGCDtb()
{
  MODEL_mkGCDtb *model = new MODEL_mkGCDtb();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkGCDtb &INST_top = *((MOD_mkGCDtb *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_gcd_x_EQ_0___d2;
	 tUInt8 DEF_INST_top_DEF_gcd_busy_flag__h399;
	 tUInt8 DEF_INST_top_DEF_x__h447;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_gcd_gcd;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_gcd_gcd;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_start;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_start;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_answer;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_answer;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_finished;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_finished;
	 INST_top.DEF_x__h211 = INST_top.INST_gcd_x.METH_read();
	 DEF_INST_top_DEF_x__h447 = INST_top.INST_state.METH_read();
	 DEF_INST_top_DEF_gcd_busy_flag__h399 = INST_top.INST_gcd_busy_flag.METH_read();
	 DEF_INST_top_DEF_gcd_x_EQ_0___d2 = (INST_top.DEF_x__h211) == 0u;
	 DEF_INST_top_DEF_CAN_FIRE_RL_answer = (DEF_INST_top_DEF_gcd_x_EQ_0___d2 && DEF_INST_top_DEF_gcd_busy_flag__h399) && DEF_INST_top_DEF_x__h447 == (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_answer = DEF_INST_top_DEF_CAN_FIRE_RL_answer;
	 DEF_INST_top_DEF_CAN_FIRE_RL_finished = DEF_INST_top_DEF_x__h447 == (tUInt8)2u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_finished = DEF_INST_top_DEF_CAN_FIRE_RL_finished;
	 DEF_INST_top_DEF_CAN_FIRE_RL_gcd_gcd = !DEF_INST_top_DEF_gcd_x_EQ_0___d2 && DEF_INST_top_DEF_gcd_busy_flag__h399;
	 DEF_INST_top_DEF_WILL_FIRE_RL_gcd_gcd = DEF_INST_top_DEF_CAN_FIRE_RL_gcd_gcd;
	 DEF_INST_top_DEF_CAN_FIRE_RL_start = !DEF_INST_top_DEF_gcd_busy_flag__h399 && DEF_INST_top_DEF_x__h447 == (tUInt8)0u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_start = DEF_INST_top_DEF_CAN_FIRE_RL_start;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_answer)
	   INST_top.RL_answer();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_finished)
	   INST_top.RL_finished();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_gcd_gcd)
	   INST_top.RL_gcd_gcd();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_start)
	   INST_top.RL_start();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_gcd_x.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_gcd_y.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_gcd_busy_flag.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_state.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkGCDtb::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkGCDtb_instance = new MOD_mkGCDtb(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkGCDtb_instance->set_clk_0)("CLK");
}
void MODEL_mkGCDtb::destroy_model()
{
  delete mkGCDtb_instance;
  mkGCDtb_instance = NULL;
}
void MODEL_mkGCDtb::reset_model(bool asserted)
{
  (mkGCDtb_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkGCDtb::get_instance()
{
  return mkGCDtb_instance;
}

/* Fill in version numbers */
void MODEL_mkGCDtb::get_version(unsigned int *year,
				unsigned int *month,
				char const **annotation,
				char const **build)
{
  *year = 2016u;
  *month = 7u;
  *annotation = "beta1";
  *build = "34806";
}

/* Get the model creation time */
time_t MODEL_mkGCDtb::get_creation_time()
{
  
  /* Sat May  5 14:25:01 UTC 2018 */
  return 1525530301llu;
}

/* Control run-time licensing */
tUInt64 MODEL_mkGCDtb::skip_license_check()
{
  return 0llu;
}

/* State dumping function */
void MODEL_mkGCDtb::dump_state()
{
  (mkGCDtb_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkGCDtb & mkGCDtb_backing(tSimStateHdl simHdl)
{
  static MOD_mkGCDtb *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkGCDtb(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkGCDtb::dump_VCD_defs()
{
  (mkGCDtb_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkGCDtb::dump_VCD(tVCDDumpType dt)
{
  (mkGCDtb_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkGCDtb_backing(sim_hdl));
}
