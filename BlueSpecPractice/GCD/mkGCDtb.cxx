/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sat May  5 14:25:01 UTC 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkGCDtb.h"


/* String declarations */
static std::string const __str_literal_1("The answer is: ", 15u);


/* Constructor */
MOD_mkGCDtb::MOD_mkGCDtb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_gcd_busy_flag(simHdl, "gcd_busy_flag", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_gcd_x(simHdl, "gcd_x", this, 32u, 0u, (tUInt8)0u),
    INST_gcd_y(simHdl, "gcd_y", this, 32u, 0u, (tUInt8)0u),
    INST_state(simHdl, "state", this, 2u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 9u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkGCDtb::init_symbols_0()
{
  init_symbol(&symbols[0u], "gcd_busy_flag", SYM_MODULE, &INST_gcd_busy_flag);
  init_symbol(&symbols[1u], "gcd_x", SYM_MODULE, &INST_gcd_x);
  init_symbol(&symbols[2u], "gcd_y", SYM_MODULE, &INST_gcd_y);
  init_symbol(&symbols[3u], "RL_answer", SYM_RULE);
  init_symbol(&symbols[4u], "RL_finished", SYM_RULE);
  init_symbol(&symbols[5u], "RL_gcd_gcd", SYM_RULE);
  init_symbol(&symbols[6u], "RL_start", SYM_RULE);
  init_symbol(&symbols[7u], "state", SYM_MODULE, &INST_state);
  init_symbol(&symbols[8u], "x__h211", SYM_DEF, &DEF_x__h211, 32u);
}


/* Rule actions */

void MOD_mkGCDtb::RL_gcd_gcd()
{
  tUInt32 DEF_x__h166;
  tUInt8 DEF_gcd_x_ULT_gcd_y___d7;
  tUInt32 DEF_IF_gcd_x_ULT_gcd_y_THEN_gcd_y_ELSE_gcd_x_MINUS_ETC___d9;
  DEF_v__h391 = INST_gcd_y.METH_read();
  DEF_x__h211 = INST_gcd_x.METH_read();
  DEF_gcd_x_ULT_gcd_y___d7 = DEF_x__h211 < DEF_v__h391;
  DEF_x__h166 = DEF_x__h211 - DEF_v__h391;
  DEF_IF_gcd_x_ULT_gcd_y_THEN_gcd_y_ELSE_gcd_x_MINUS_ETC___d9 = DEF_gcd_x_ULT_gcd_y___d7 ? DEF_v__h391 : DEF_x__h166;
  INST_gcd_x.METH_write(DEF_IF_gcd_x_ULT_gcd_y_THEN_gcd_y_ELSE_gcd_x_MINUS_ETC___d9);
  if (DEF_gcd_x_ULT_gcd_y___d7)
    INST_gcd_y.METH_write(DEF_x__h211);
}

void MOD_mkGCDtb::RL_start()
{
  INST_gcd_x.METH_write(10u);
  INST_gcd_y.METH_write(15u);
  INST_gcd_busy_flag.METH_write((tUInt8)1u);
  INST_state.METH_write((tUInt8)1u);
}

void MOD_mkGCDtb::RL_answer()
{
  DEF_v__h391 = INST_gcd_y.METH_read();
  INST_gcd_busy_flag.METH_write((tUInt8)0u);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_v__h391);
  INST_state.METH_write((tUInt8)2u);
}

void MOD_mkGCDtb::RL_finished()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}


/* Methods */


/* Reset routines */

void MOD_mkGCDtb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state.reset_RST(ARG_rst_in);
  INST_gcd_y.reset_RST(ARG_rst_in);
  INST_gcd_x.reset_RST(ARG_rst_in);
  INST_gcd_busy_flag.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkGCDtb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkGCDtb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_gcd_busy_flag.dump_state(indent + 2u);
  INST_gcd_x.dump_state(indent + 2u);
  INST_gcd_y.dump_state(indent + 2u);
  INST_state.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkGCDtb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 7u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h391", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h211", 32u);
  num = INST_gcd_busy_flag.dump_VCD_defs(num);
  num = INST_gcd_x.dump_VCD_defs(num);
  num = INST_gcd_y.dump_VCD_defs(num);
  num = INST_state.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkGCDtb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkGCDtb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkGCDtb::vcd_defs(tVCDDumpType dt, MOD_mkGCDtb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_v__h391) != DEF_v__h391)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h391, 32u);
	backing.DEF_v__h391 = DEF_v__h391;
      }
      ++num;
      if ((backing.DEF_x__h211) != DEF_x__h211)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h211, 32u);
	backing.DEF_x__h211 = DEF_x__h211;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_v__h391, 32u);
      backing.DEF_v__h391 = DEF_v__h391;
      vcd_write_val(sim_hdl, num++, DEF_x__h211, 32u);
      backing.DEF_x__h211 = DEF_x__h211;
    }
}

void MOD_mkGCDtb::vcd_prims(tVCDDumpType dt, MOD_mkGCDtb &backing)
{
  INST_gcd_busy_flag.dump_VCD(dt, backing.INST_gcd_busy_flag);
  INST_gcd_x.dump_VCD(dt, backing.INST_gcd_x);
  INST_gcd_y.dump_VCD(dt, backing.INST_gcd_y);
  INST_state.dump_VCD(dt, backing.INST_state);
}
