/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sat Apr 14 17:24:02 UTC 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkCounter.h"


/* Constructor */
MOD_mkCounter::MOD_mkCounter(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_decrement_called(simHdl, "decrement_called", this, 0u),
    INST_increment_called(simHdl, "increment_called", this, 0u),
    INST_value(simHdl, "value", this, 8u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 5u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkCounter::init_symbols_0()
{
  init_symbol(&symbols[0u], "decrement_called", SYM_MODULE, &INST_decrement_called);
  init_symbol(&symbols[1u], "increment_called", SYM_MODULE, &INST_increment_called);
  init_symbol(&symbols[2u], "RL_do_decrement", SYM_RULE);
  init_symbol(&symbols[3u], "RL_do_increment", SYM_RULE);
  init_symbol(&symbols[4u], "value", SYM_MODULE, &INST_value);
}


/* Rule actions */

void MOD_mkCounter::RL_do_increment()
{
  tUInt8 DEF_x__h150;
  DEF_x__h182 = INST_value.METH_read();
  DEF_x__h150 = (tUInt8)255u & (DEF_x__h182 + (tUInt8)1u);
  INST_value.METH_write(DEF_x__h150);
}

void MOD_mkCounter::RL_do_decrement()
{
  tUInt8 DEF_x__h177;
  DEF_x__h182 = INST_value.METH_read();
  DEF_x__h177 = (tUInt8)255u & (DEF_x__h182 - (tUInt8)1u);
  INST_value.METH_write(DEF_x__h177);
}


/* Methods */

tUInt8 MOD_mkCounter::METH_read()
{
  tUInt8 PORT_read;
  DEF_x__h182 = INST_value.METH_read();
  PORT_read = DEF_x__h182;
  return PORT_read;
}

tUInt8 MOD_mkCounter::METH_RDY_read()
{
  tUInt8 DEF_CAN_FIRE_read;
  tUInt8 PORT_RDY_read;
  DEF_CAN_FIRE_read = (tUInt8)1u;
  PORT_RDY_read = DEF_CAN_FIRE_read;
  return PORT_RDY_read;
}

void MOD_mkCounter::METH_load(tUInt8 ARG_load_newval)
{
  INST_value.METH_write(ARG_load_newval);
}

tUInt8 MOD_mkCounter::METH_RDY_load()
{
  tUInt8 DEF_CAN_FIRE_load;
  tUInt8 PORT_RDY_load;
  DEF_decrement_called_whas____d2 = INST_decrement_called.METH_whas();
  DEF_NOT_decrement_called_whas___d3 = !DEF_decrement_called_whas____d2;
  DEF_increment_called_whas____d1 = INST_increment_called.METH_whas();
  DEF_NOT_increment_called_whas___d7 = !DEF_increment_called_whas____d1;
  DEF_CAN_FIRE_load = DEF_NOT_increment_called_whas___d7 && DEF_NOT_decrement_called_whas___d3;
  PORT_RDY_load = DEF_CAN_FIRE_load;
  return PORT_RDY_load;
}

void MOD_mkCounter::METH_increment()
{
  INST_increment_called.METH_wset();
}

tUInt8 MOD_mkCounter::METH_RDY_increment()
{
  tUInt8 DEF_CAN_FIRE_increment;
  tUInt8 PORT_RDY_increment;
  DEF_CAN_FIRE_increment = (tUInt8)1u;
  PORT_RDY_increment = DEF_CAN_FIRE_increment;
  return PORT_RDY_increment;
}

void MOD_mkCounter::METH_decrement()
{
  INST_decrement_called.METH_wset();
}

tUInt8 MOD_mkCounter::METH_RDY_decrement()
{
  tUInt8 DEF_CAN_FIRE_decrement;
  tUInt8 PORT_RDY_decrement;
  DEF_CAN_FIRE_decrement = (tUInt8)1u;
  PORT_RDY_decrement = DEF_CAN_FIRE_decrement;
  return PORT_RDY_decrement;
}


/* Reset routines */

void MOD_mkCounter::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_value.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkCounter::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkCounter::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_decrement_called.dump_state(indent + 2u);
  INST_increment_called.dump_state(indent + 2u);
  INST_value.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkCounter::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 9u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_decrement_called_whas___d3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_increment_called_whas___d7", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "decrement_called_whas____d2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "increment_called_whas____d1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h182", 8u);
  num = INST_decrement_called.dump_VCD_defs(num);
  num = INST_increment_called.dump_VCD_defs(num);
  num = INST_value.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkCounter::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCounter &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkCounter::vcd_defs(tVCDDumpType dt, MOD_mkCounter &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_NOT_decrement_called_whas___d3) != DEF_NOT_decrement_called_whas___d3)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_decrement_called_whas___d3, 1u);
	backing.DEF_NOT_decrement_called_whas___d3 = DEF_NOT_decrement_called_whas___d3;
      }
      ++num;
      if ((backing.DEF_NOT_increment_called_whas___d7) != DEF_NOT_increment_called_whas___d7)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_increment_called_whas___d7, 1u);
	backing.DEF_NOT_increment_called_whas___d7 = DEF_NOT_increment_called_whas___d7;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_decrement_called_whas____d2) != DEF_decrement_called_whas____d2)
      {
	vcd_write_val(sim_hdl, num, DEF_decrement_called_whas____d2, 1u);
	backing.DEF_decrement_called_whas____d2 = DEF_decrement_called_whas____d2;
      }
      ++num;
      if ((backing.DEF_increment_called_whas____d1) != DEF_increment_called_whas____d1)
      {
	vcd_write_val(sim_hdl, num, DEF_increment_called_whas____d1, 1u);
	backing.DEF_increment_called_whas____d1 = DEF_increment_called_whas____d1;
      }
      ++num;
      if ((backing.DEF_x__h182) != DEF_x__h182)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h182, 8u);
	backing.DEF_x__h182 = DEF_x__h182;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_NOT_decrement_called_whas___d3, 1u);
      backing.DEF_NOT_decrement_called_whas___d3 = DEF_NOT_decrement_called_whas___d3;
      vcd_write_val(sim_hdl, num++, DEF_NOT_increment_called_whas___d7, 1u);
      backing.DEF_NOT_increment_called_whas___d7 = DEF_NOT_increment_called_whas___d7;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_decrement_called_whas____d2, 1u);
      backing.DEF_decrement_called_whas____d2 = DEF_decrement_called_whas____d2;
      vcd_write_val(sim_hdl, num++, DEF_increment_called_whas____d1, 1u);
      backing.DEF_increment_called_whas____d1 = DEF_increment_called_whas____d1;
      vcd_write_val(sim_hdl, num++, DEF_x__h182, 8u);
      backing.DEF_x__h182 = DEF_x__h182;
    }
}

void MOD_mkCounter::vcd_prims(tVCDDumpType dt, MOD_mkCounter &backing)
{
  INST_decrement_called.dump_VCD(dt, backing.INST_decrement_called);
  INST_increment_called.dump_VCD(dt, backing.INST_increment_called);
  INST_value.dump_VCD(dt, backing.INST_value);
}
