/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Thu May  3 12:22:02 UTC 2018
 * 
 */
#include "bluesim_primitives.h"
#include "model_mktbCounter2.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mktbCounter2::MODEL_mktbCounter2()
{
  mktbCounter2_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mktbCounter2()
{
  MODEL_mktbCounter2 *model = new MODEL_mktbCounter2();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mktbCounter2 &INST_top = *((MOD_mktbCounter2 *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_NOT_counter_increment_value_whas___d9;
	 tUInt8 DEF_INST_top_DEF_NOT_counter_decrement_value_whas___d3;
	 tUInt8 DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8_9_OR_state_mkF_ETC___d68;
	 tUInt8 DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8_9_OR_state_mkF_ETC___d72;
	 tUInt8 DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8___d19;
	 tUInt8 DEF_INST_top_DEF_NOT_start_wire_whas__0_1_OR_NOT_start_wire_wge_ETC___d24;
	 tUInt8 DEF_INST_top_DEF_NOT_abort_whas__7_9_OR_NOT_abort_wget__8_0___d41;
	 tUInt8 DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8_9_OR_state_mkF_ETC___d49;
	 tUInt8 DEF_INST_top_DEF_state_mkFSMstate_read__5_EQ_6___d48;
	 tUInt8 DEF_INST_top_DEF_abort_wget____d18;
	 tUInt8 DEF_INST_top_DEF_abort_whas____d17;
	 tUInt8 DEF_INST_top_DEF_start_reg__h12898;
	 tUInt8 DEF_INST_top_DEF_running__h13003;
	 tUInt8 DEF_INST_top_DEF_start_wire_wget____d22;
	 tUInt8 DEF_INST_top_DEF_start_wire_whas____d20;
	 tUInt8 DEF_INST_top_DEF_counter_increment_value_whas____d1;
	 tUInt8 DEF_INST_top_DEF_counter_decrement_value_whas____d2;
	 tUInt8 DEF_INST_top_DEF_start_reg_1__h11095;
	 tUInt8 DEF_INST_top_DEF_state_fired__h11097;
	 tUInt8 DEF_INST_top_DEF_state_mkFSMstate_read____d45;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_counter_do_increment;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_counter_do_increment;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_counter_do_decrement;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_counter_do_decrement;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_start_reg__dreg_update;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_start_reg__dreg_update;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_state_handle_abort;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_state_handle_abort;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_state_fired__dreg_update;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_state_fired__dreg_update;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_state_every;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_state_every;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_restart;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_restart;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_action_l97c14;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_action_l98c11;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_action_l99c14;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_action_l100c14;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_action_l101c11;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_action_l102c7;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_idle_l96c15;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_idle_l96c15;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_fsm_start;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_fsm_start;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_auto_start;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_auto_start;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_auto_finish;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_auto_finish;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE___me_check_7;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE___me_check_7;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE___me_check_8;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE___me_check_8;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE___me_check_9;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE___me_check_9;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE___me_check_10;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE___me_check_10;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE___me_check_11;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE___me_check_11;
	 DEF_INST_top_DEF_state_mkFSMstate_read____d45 = INST_top.INST_state_mkFSMstate.METH_read();
	 DEF_INST_top_DEF_abort_whas____d17 = INST_top.INST_abort.METH_whas();
	 DEF_INST_top_DEF_abort_wget____d18 = INST_top.INST_abort.METH_wget();
	 DEF_INST_top_DEF_NOT_abort_whas__7_9_OR_NOT_abort_wget__8_0___d41 = !DEF_INST_top_DEF_abort_whas____d17 || !DEF_INST_top_DEF_abort_wget____d18;
	 DEF_INST_top_DEF_CAN_FIRE_RL_action_l100c14 = DEF_INST_top_DEF_NOT_abort_whas__7_9_OR_NOT_abort_wget__8_0___d41 && DEF_INST_top_DEF_state_mkFSMstate_read____d45 == (tUInt8)3u;
	 INST_top.DEF_WILL_FIRE_RL_action_l100c14 = DEF_INST_top_DEF_CAN_FIRE_RL_action_l100c14;
	 DEF_INST_top_DEF_CAN_FIRE_RL_action_l101c11 = DEF_INST_top_DEF_NOT_abort_whas__7_9_OR_NOT_abort_wget__8_0___d41 && DEF_INST_top_DEF_state_mkFSMstate_read____d45 == (tUInt8)4u;
	 INST_top.DEF_WILL_FIRE_RL_action_l101c11 = DEF_INST_top_DEF_CAN_FIRE_RL_action_l101c11;
	 DEF_INST_top_DEF_CAN_FIRE_RL_action_l102c7 = DEF_INST_top_DEF_NOT_abort_whas__7_9_OR_NOT_abort_wget__8_0___d41 && DEF_INST_top_DEF_state_mkFSMstate_read____d45 == (tUInt8)5u;
	 INST_top.DEF_WILL_FIRE_RL_action_l102c7 = DEF_INST_top_DEF_CAN_FIRE_RL_action_l102c7;
	 DEF_INST_top_DEF_CAN_FIRE_RL_action_l98c11 = DEF_INST_top_DEF_NOT_abort_whas__7_9_OR_NOT_abort_wget__8_0___d41 && DEF_INST_top_DEF_state_mkFSMstate_read____d45 == (tUInt8)1u;
	 INST_top.DEF_WILL_FIRE_RL_action_l98c11 = DEF_INST_top_DEF_CAN_FIRE_RL_action_l98c11;
	 DEF_INST_top_DEF_CAN_FIRE_RL_action_l99c14 = DEF_INST_top_DEF_NOT_abort_whas__7_9_OR_NOT_abort_wget__8_0___d41 && DEF_INST_top_DEF_state_mkFSMstate_read____d45 == (tUInt8)2u;
	 INST_top.DEF_WILL_FIRE_RL_action_l99c14 = DEF_INST_top_DEF_CAN_FIRE_RL_action_l99c14;
	 DEF_INST_top_DEF_state_fired__h11097 = INST_top.INST_state_fired.METH_read();
	 DEF_INST_top_DEF_start_reg_1__h11095 = INST_top.INST_start_reg_1.METH_read();
	 DEF_INST_top_DEF_running__h13003 = INST_top.INST_running.METH_read();
	 DEF_INST_top_DEF_start_reg__h12898 = INST_top.INST_start_reg.METH_read();
	 DEF_INST_top_DEF_state_mkFSMstate_read__5_EQ_6___d48 = DEF_INST_top_DEF_state_mkFSMstate_read____d45 == (tUInt8)6u;
	 DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8___d19 = DEF_INST_top_DEF_abort_whas____d17 && DEF_INST_top_DEF_abort_wget____d18;
	 DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8_9_OR_state_mkF_ETC___d49 = (DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8___d19 || DEF_INST_top_DEF_state_mkFSMstate_read____d45 == (tUInt8)0u) || DEF_INST_top_DEF_state_mkFSMstate_read__5_EQ_6___d48;
	 DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8_9_OR_state_mkF_ETC___d68 = DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8_9_OR_state_mkF_ETC___d49 && (!DEF_INST_top_DEF_start_reg_1__h11095 || DEF_INST_top_DEF_state_fired__h11097);
	 DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8_9_OR_state_mkF_ETC___d72 = DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8_9_OR_state_mkF_ETC___d68 && !DEF_INST_top_DEF_start_reg__h12898;
	 DEF_INST_top_DEF_CAN_FIRE_RL_auto_finish = DEF_INST_top_DEF_running__h13003 && DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8_9_OR_state_mkF_ETC___d72;
	 DEF_INST_top_DEF_WILL_FIRE_RL_auto_finish = DEF_INST_top_DEF_CAN_FIRE_RL_auto_finish;
	 DEF_INST_top_DEF_CAN_FIRE_RL_auto_start = DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8_9_OR_state_mkF_ETC___d72 && !DEF_INST_top_DEF_running__h13003;
	 DEF_INST_top_DEF_WILL_FIRE_RL_auto_start = DEF_INST_top_DEF_CAN_FIRE_RL_auto_start;
	 DEF_INST_top_DEF_CAN_FIRE_RL_fsm_start = DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8_9_OR_state_mkF_ETC___d68 && DEF_INST_top_DEF_start_reg__h12898;
	 DEF_INST_top_DEF_WILL_FIRE_RL_fsm_start = DEF_INST_top_DEF_CAN_FIRE_RL_fsm_start;
	 DEF_INST_top_DEF_CAN_FIRE_RL_restart = (DEF_INST_top_DEF_start_reg_1__h11095 && !DEF_INST_top_DEF_state_fired__h11097) && DEF_INST_top_DEF_NOT_abort_whas__7_9_OR_NOT_abort_wget__8_0___d41;
	 DEF_INST_top_DEF_WILL_FIRE_RL_restart = DEF_INST_top_DEF_CAN_FIRE_RL_restart;
	 DEF_INST_top_DEF_CAN_FIRE_RL_start_reg__dreg_update = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_start_reg__dreg_update = DEF_INST_top_DEF_CAN_FIRE_RL_start_reg__dreg_update;
	 DEF_INST_top_DEF_CAN_FIRE___me_check_10 = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE___me_check_10 = DEF_INST_top_DEF_CAN_FIRE___me_check_10;
	 DEF_INST_top_DEF_CAN_FIRE_RL_state_every = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_state_every = DEF_INST_top_DEF_CAN_FIRE_RL_state_every;
	 DEF_INST_top_DEF_CAN_FIRE_RL_state_fired__dreg_update = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_state_fired__dreg_update = DEF_INST_top_DEF_CAN_FIRE_RL_state_fired__dreg_update;
	 DEF_INST_top_DEF_CAN_FIRE___me_check_11 = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE___me_check_11 = DEF_INST_top_DEF_CAN_FIRE___me_check_11;
	 DEF_INST_top_DEF_CAN_FIRE___me_check_7 = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE___me_check_7 = DEF_INST_top_DEF_CAN_FIRE___me_check_7;
	 DEF_INST_top_DEF_CAN_FIRE___me_check_8 = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE___me_check_8 = DEF_INST_top_DEF_CAN_FIRE___me_check_8;
	 DEF_INST_top_DEF_CAN_FIRE___me_check_9 = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE___me_check_9 = DEF_INST_top_DEF_CAN_FIRE___me_check_9;
	 if (INST_top.DEF_WILL_FIRE_RL_action_l100c14)
	   INST_top.RL_action_l100c14();
	 if (INST_top.DEF_WILL_FIRE_RL_action_l101c11)
	   INST_top.RL_action_l101c11();
	 if (INST_top.DEF_WILL_FIRE_RL_action_l102c7)
	   INST_top.RL_action_l102c7();
	 if (INST_top.DEF_WILL_FIRE_RL_action_l98c11)
	   INST_top.RL_action_l98c11();
	 if (INST_top.DEF_WILL_FIRE_RL_action_l99c14)
	   INST_top.RL_action_l99c14();
	 DEF_INST_top_DEF_counter_decrement_value_whas____d2 = INST_top.INST_counter_decrement_value.METH_whas();
	 DEF_INST_top_DEF_counter_increment_value_whas____d1 = INST_top.INST_counter_increment_value.METH_whas();
	 DEF_INST_top_DEF_NOT_counter_increment_value_whas___d9 = !DEF_INST_top_DEF_counter_increment_value_whas____d1;
	 DEF_INST_top_DEF_CAN_FIRE_RL_counter_do_decrement = DEF_INST_top_DEF_counter_decrement_value_whas____d2 && DEF_INST_top_DEF_NOT_counter_increment_value_whas___d9;
	 DEF_INST_top_DEF_WILL_FIRE_RL_counter_do_decrement = DEF_INST_top_DEF_CAN_FIRE_RL_counter_do_decrement;
	 DEF_INST_top_DEF_NOT_counter_decrement_value_whas___d3 = !DEF_INST_top_DEF_counter_decrement_value_whas____d2;
	 DEF_INST_top_DEF_CAN_FIRE_RL_counter_do_increment = DEF_INST_top_DEF_counter_increment_value_whas____d1 && DEF_INST_top_DEF_NOT_counter_decrement_value_whas___d3;
	 DEF_INST_top_DEF_WILL_FIRE_RL_counter_do_increment = DEF_INST_top_DEF_CAN_FIRE_RL_counter_do_increment;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_auto_finish)
	   INST_top.RL_auto_finish();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_auto_start)
	   INST_top.RL_auto_start();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_counter_do_decrement)
	   INST_top.RL_counter_do_decrement();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_counter_do_increment)
	   INST_top.RL_counter_do_increment();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_restart)
	   INST_top.RL_restart();
	 if (DEF_INST_top_DEF_WILL_FIRE___me_check_8)
	   INST_top.__me_check_8();
	 if (DEF_INST_top_DEF_WILL_FIRE___me_check_9)
	   INST_top.__me_check_9();
	 if (DEF_INST_top_DEF_WILL_FIRE___me_check_10)
	   INST_top.__me_check_10();
	 if (DEF_INST_top_DEF_WILL_FIRE___me_check_11)
	   INST_top.__me_check_11();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_fsm_start)
	   INST_top.RL_fsm_start();
	 DEF_INST_top_DEF_start_wire_whas____d20 = INST_top.INST_start_wire.METH_whas();
	 DEF_INST_top_DEF_start_wire_wget____d22 = INST_top.INST_start_wire.METH_wget();
	 DEF_INST_top_DEF_CAN_FIRE_RL_action_l97c14 = ((DEF_INST_top_DEF_NOT_counter_decrement_value_whas___d3 && DEF_INST_top_DEF_NOT_counter_increment_value_whas___d9) && ((DEF_INST_top_DEF_start_wire_whas____d20 && DEF_INST_top_DEF_start_wire_wget____d22) && DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8_9_OR_state_mkF_ETC___d49)) && !(((DEF_INST_top_DEF_CAN_FIRE_RL_action_l102c7 || DEF_INST_top_DEF_CAN_FIRE_RL_action_l101c11) || (DEF_INST_top_DEF_CAN_FIRE_RL_action_l100c14 || DEF_INST_top_DEF_CAN_FIRE_RL_action_l99c14)) || ((DEF_INST_top_DEF_CAN_FIRE_RL_action_l98c11 || DEF_INST_top_DEF_CAN_FIRE_RL_counter_do_decrement) || DEF_INST_top_DEF_CAN_FIRE_RL_counter_do_increment));
	 INST_top.DEF_WILL_FIRE_RL_action_l97c14 = DEF_INST_top_DEF_CAN_FIRE_RL_action_l97c14;
	 DEF_INST_top_DEF_NOT_start_wire_whas__0_1_OR_NOT_start_wire_wge_ETC___d24 = !DEF_INST_top_DEF_start_wire_whas____d20 || !DEF_INST_top_DEF_start_wire_wget____d22;
	 DEF_INST_top_DEF_CAN_FIRE_RL_idle_l96c15 = (DEF_INST_top_DEF_NOT_start_wire_whas__0_1_OR_NOT_start_wire_wge_ETC___d24 && (DEF_INST_top_DEF_NOT_abort_whas__7_9_OR_NOT_abort_wget__8_0___d41 && DEF_INST_top_DEF_state_mkFSMstate_read__5_EQ_6___d48)) && !(((DEF_INST_top_DEF_CAN_FIRE_RL_action_l102c7 || DEF_INST_top_DEF_CAN_FIRE_RL_action_l101c11) || (DEF_INST_top_DEF_CAN_FIRE_RL_action_l100c14 || DEF_INST_top_DEF_CAN_FIRE_RL_action_l99c14)) || DEF_INST_top_DEF_CAN_FIRE_RL_action_l98c11);
	 DEF_INST_top_DEF_WILL_FIRE_RL_idle_l96c15 = DEF_INST_top_DEF_CAN_FIRE_RL_idle_l96c15;
	 DEF_INST_top_DEF_CAN_FIRE_RL_state_handle_abort = (DEF_INST_top_DEF_abort_whas__7_AND_abort_wget__8___d19 && DEF_INST_top_DEF_NOT_start_wire_whas__0_1_OR_NOT_start_wire_wge_ETC___d24) && !(((DEF_INST_top_DEF_CAN_FIRE_RL_action_l102c7 || DEF_INST_top_DEF_CAN_FIRE_RL_action_l101c11) || (DEF_INST_top_DEF_CAN_FIRE_RL_action_l100c14 || DEF_INST_top_DEF_CAN_FIRE_RL_action_l99c14)) || (DEF_INST_top_DEF_CAN_FIRE_RL_action_l98c11 || DEF_INST_top_DEF_CAN_FIRE_RL_restart));
	 DEF_INST_top_DEF_WILL_FIRE_RL_state_handle_abort = DEF_INST_top_DEF_CAN_FIRE_RL_state_handle_abort;
	 if (INST_top.DEF_WILL_FIRE_RL_action_l97c14)
	   INST_top.RL_action_l97c14();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_start_reg__dreg_update)
	   INST_top.RL_start_reg__dreg_update();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_state_handle_abort)
	   INST_top.RL_state_handle_abort();
	 if (DEF_INST_top_DEF_WILL_FIRE___me_check_7)
	   INST_top.__me_check_7();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_idle_l96c15)
	   INST_top.RL_idle_l96c15();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_state_every)
	   INST_top.RL_state_every();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_state_fired__dreg_update)
	   INST_top.RL_state_fired__dreg_update();
	 INST_top.INST_state_fired_1.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_state_overlap_pw.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_state_set_pw.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_abort.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_start_reg_2.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_start_wire.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_counter_decrement_value.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_counter_increment_value.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_counter_value.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_start_reg.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_start_reg_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_state_mkFSMstate.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_state_fired.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_state_can_overlap.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_running.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mktbCounter2::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mktbCounter2_instance = new MOD_mktbCounter2(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mktbCounter2_instance->INST_counter_increment_value.set_clk_0)("CLK");
  (mktbCounter2_instance->INST_counter_decrement_value.set_clk_0)("CLK");
  (mktbCounter2_instance->INST_start_wire.set_clk_0)("CLK");
  (mktbCounter2_instance->INST_start_reg_2.set_clk_0)("CLK");
  (mktbCounter2_instance->INST_abort.set_clk_0)("CLK");
  (mktbCounter2_instance->INST_state_set_pw.set_clk_0)("CLK");
  (mktbCounter2_instance->INST_state_overlap_pw.set_clk_0)("CLK");
  (mktbCounter2_instance->INST_state_fired_1.set_clk_0)("CLK");
  (mktbCounter2_instance->set_clk_0)("CLK");
}
void MODEL_mktbCounter2::destroy_model()
{
  delete mktbCounter2_instance;
  mktbCounter2_instance = NULL;
}
void MODEL_mktbCounter2::reset_model(bool asserted)
{
  (mktbCounter2_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mktbCounter2::get_instance()
{
  return mktbCounter2_instance;
}

/* Fill in version numbers */
void MODEL_mktbCounter2::get_version(unsigned int *year,
				     unsigned int *month,
				     char const **annotation,
				     char const **build)
{
  *year = 2016u;
  *month = 7u;
  *annotation = "beta1";
  *build = "34806";
}

/* Get the model creation time */
time_t MODEL_mktbCounter2::get_creation_time()
{
  
  /* Thu May  3 12:22:02 UTC 2018 */
  return 1525350122llu;
}

/* Control run-time licensing */
tUInt64 MODEL_mktbCounter2::skip_license_check()
{
  return 0llu;
}

/* State dumping function */
void MODEL_mktbCounter2::dump_state()
{
  (mktbCounter2_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mktbCounter2 & mktbCounter2_backing(tSimStateHdl simHdl)
{
  static MOD_mktbCounter2 *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mktbCounter2(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mktbCounter2::dump_VCD_defs()
{
  (mktbCounter2_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mktbCounter2::dump_VCD(tVCDDumpType dt)
{
  (mktbCounter2_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mktbCounter2_backing(sim_hdl));
}
