//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Oct 30 18:02:04 UTC 2018
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTest(CLK,
	      RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire start_wire$whas, state_set_pw$whas;

  // register connection_letterOffset
  reg [5 : 0] connection_letterOffset;
  wire [5 : 0] connection_letterOffset$D_IN;
  wire connection_letterOffset$EN;

  // register connection_letter_counter
  reg [13 : 0] connection_letter_counter;
  wire [13 : 0] connection_letter_counter$D_IN;
  wire connection_letter_counter$EN;

  // register connection_state
  reg [2 : 0] connection_state;
  reg [2 : 0] connection_state$D_IN;
  wire connection_state$EN;

  // register connection_wordTypeAddr
  reg [13 : 0] connection_wordTypeAddr;
  wire [13 : 0] connection_wordTypeAddr$D_IN;
  wire connection_wordTypeAddr$EN;

  // register connection_word_counter
  reg [10 : 0] connection_word_counter;
  wire [10 : 0] connection_word_counter$D_IN;
  wire connection_word_counter$EN;

  // register jj_delay_count
  reg [7 : 0] jj_delay_count;
  wire [7 : 0] jj_delay_count$D_IN;
  wire jj_delay_count$EN;

  // register probTb_nextAddr
  reg [13 : 0] probTb_nextAddr;
  wire [13 : 0] probTb_nextAddr$D_IN;
  wire probTb_nextAddr$EN;

  // register probTb_nextAddrOffset
  reg [14 : 0] probTb_nextAddrOffset;
  wire [14 : 0] probTb_nextAddrOffset$D_IN;
  wire probTb_nextAddrOffset$EN;

  // register probTb_previousLetter
  reg [4 : 0] probTb_previousLetter;
  wire [4 : 0] probTb_previousLetter$D_IN;
  wire probTb_previousLetter$EN;

  // register probTb_resetAddr
  reg [14 : 0] probTb_resetAddr;
  wire [14 : 0] probTb_resetAddr$D_IN;
  wire probTb_resetAddr$EN;

  // register probTb_state
  reg [2 : 0] probTb_state;
  wire [2 : 0] probTb_state$D_IN;
  wire probTb_state$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [2 : 0] state_mkFSMstate;
  reg [2 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule mem
  wire [54 : 0] mem$put_memReq;
  wire [33 : 0] mem$get0, mem$get1, mem$get2, mem$get3;
  wire [13 : 0] mem$get0_addr, mem$get1_addr, mem$get2_addr, mem$get3_addr;
  wire mem$EN_nodeDump,
       mem$EN_put,
       mem$RDY_get0,
       mem$RDY_get1,
       mem$RDY_get2,
       mem$RDY_get3,
       mem$RDY_nodeDump,
       mem$RDY_put,
       mem$dumpCompletion;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_l22c15,
       WILL_FIRE_RL_action_l23c10,
       WILL_FIRE_RL_action_l24c11,
       WILL_FIRE_RL_action_np,
       WILL_FIRE_RL_connection_directMemConnections,
       WILL_FIRE_RL_connection_dumpMem,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l21c13,
       WILL_FIRE_RL_idle_l21c13_1,
       WILL_FIRE_RL_probTb_movingDown;

  // inputs to muxes for submodule ports
  wire [54 : 0] MUX_mem$put_1__VAL_1, MUX_mem$put_1__VAL_2;
  wire [7 : 0] MUX_jj_delay_count$write_1__VAL_1;
  wire MUX_connection_state$write_1__SEL_1,
       MUX_mem$put_1__SEL_1,
       MUX_start_reg$write_1__SEL_2,
       MUX_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  reg [13 : 0] CASE_memget1_BITS_4_TO_0_26_connection_wordTy_ETC__q2;
  reg CASE_memget1_BITS_4_TO_0_26_connection_word_c_ETC__q1;
  wire [13 : 0] IF_probTb_nextAddrOffset_67_BIT_14_68_THEN_IF__ETC___d383,
		connection_wordTypeAddr_4_MINUS_0_CONCAT_conne_ETC___d56,
		probTb_nextAddr_58_PLUS_2___d371,
		x__h1597;
  wire [10 : 0] x__h787;
  wire [6 : 0] x__h2242;
  wire [5 : 0] x__h1273;
  wire NOT_mem_get0_connection_letter_counter_BITS_4__ETC___d53,
       NOT_mem_get3_probTb_nextAddr_58_59_BIT_19_60_6_ETC___d271,
       abort_whas__00_AND_abort_wget__01_02_OR_state__ETC___d470,
       mem_RDY_get1__0_AND_IF_mem_get1_connection_let_ETC___d22;

  // submodule mem
  mkMagicMemory mem(.CLK(CLK),
		    .RST_N(RST_N),
		    .get0_addr(mem$get0_addr),
		    .get1_addr(mem$get1_addr),
		    .get2_addr(mem$get2_addr),
		    .get3_addr(mem$get3_addr),
		    .put_memReq(mem$put_memReq),
		    .EN_put(mem$EN_put),
		    .EN_nodeDump(mem$EN_nodeDump),
		    .put(),
		    .RDY_put(mem$RDY_put),
		    .get0(mem$get0),
		    .RDY_get0(mem$RDY_get0),
		    .get1(mem$get1),
		    .RDY_get1(mem$RDY_get1),
		    .get2(mem$get2),
		    .RDY_get2(mem$RDY_get2),
		    .get3(mem$get3),
		    .RDY_get3(mem$RDY_get3),
		    .RDY_nodeDump(mem$RDY_nodeDump),
		    .dumpCompletion(mem$dumpCompletion),
		    .RDY_dumpCompletion());

  // rule RL_action_l23c10
  assign WILL_FIRE_RL_action_l23c10 =
	     mem$dumpCompletion && state_mkFSMstate == 3'd1 ;

  // rule RL_action_l24c11
  assign WILL_FIRE_RL_action_l24c11 =
	     probTb_state != 3'd4 && state_mkFSMstate == 3'd2 ;

  // rule RL_action_np
  assign WILL_FIRE_RL_action_np =
	     jj_delay_count != 8'd189 &&
	     (state_mkFSMstate == 3'd4 || state_mkFSMstate == 3'd5) ;

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas__00_AND_abort_wget__01_02_OR_state__ETC___d470 &&
	     start_reg ;

  // rule RL_action_l22c15
  assign WILL_FIRE_RL_action_l22c15 =
	     connection_state == 3'd1 &&
	     (start_wire$whas && state_mkFSMstate == 3'd0 ||
	      jj_delay_count == 8'd189 && start_wire$whas &&
	      state_mkFSMstate == 3'd4 ||
	      jj_delay_count == 8'd189 && start_wire$whas &&
	      state_mkFSMstate == 3'd5) ;

  // rule RL_idle_l21c13
  assign WILL_FIRE_RL_idle_l21c13 =
	     jj_delay_count == 8'd189 && !start_wire$whas &&
	     state_mkFSMstate == 3'd4 ;

  // rule RL_idle_l21c13_1
  assign WILL_FIRE_RL_idle_l21c13_1 =
	     jj_delay_count == 8'd189 && !start_wire$whas &&
	     state_mkFSMstate == 3'd5 ;

  // rule RL_connection_directMemConnections
  assign WILL_FIRE_RL_connection_directMemConnections =
	     mem$RDY_get0 &&
	     (mem$get0[4:0] == 5'd26 || mem$get0[4:0] == 5'd27 ||
	      mem$get0[4:0] == 5'd28 ||
	      mem_RDY_get1__0_AND_IF_mem_get1_connection_let_ETC___d22) &&
	     connection_state == 3'd3 ;

  // rule RL_probTb_movingDown
  assign WILL_FIRE_RL_probTb_movingDown =
	     mem$RDY_get3 &&
	     NOT_mem_get3_probTb_nextAddr_58_59_BIT_19_60_6_ETC___d271 &&
	     probTb_state == 3'd4 &&
	     !WILL_FIRE_RL_connection_directMemConnections ;

  // rule RL_connection_dumpMem
  assign WILL_FIRE_RL_connection_dumpMem =
	     mem$RDY_nodeDump && connection_state == 3'd0 ;

  // inputs to muxes for submodule ports
  assign MUX_connection_state$write_1__SEL_1 =
	     WILL_FIRE_RL_connection_directMemConnections &&
	     mem$get0[4:0] == 5'd28 ;
  assign MUX_mem$put_1__SEL_1 =
	     WILL_FIRE_RL_connection_directMemConnections &&
	     NOT_mem_get0_connection_letter_counter_BITS_4__ETC___d53 ;
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas__00_AND_abort_wget__01_02_OR_state__ETC___d470 &&
	     !start_reg &&
	     !running ;
  assign MUX_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l21c13_1 || WILL_FIRE_RL_idle_l21c13 ;
  assign MUX_jj_delay_count$write_1__VAL_1 = jj_delay_count + 8'd1 ;
  assign MUX_mem$put_1__VAL_1 =
	     { 7'h2A,
	       connection_letter_counter,
	       1'd1,
	       CASE_memget1_BITS_4_TO_0_26_connection_wordTy_ETC__q2,
	       14'd128,
	       mem$get0[4:0] } ;
  assign MUX_mem$put_1__VAL_2 =
	     { 7'd1,
	       probTb_nextAddr,
	       1'd1,
	       mem$get3[18:5],
	       mem$get3[33:27],
	       x__h2242,
	       mem$get3[4:0] } ;

  // inlined wires
  assign start_wire$whas =
	     WILL_FIRE_RL_fsm_start || start_reg_1 && !state_fired ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l21c13_1 || WILL_FIRE_RL_idle_l21c13 ||
	     WILL_FIRE_RL_action_np ||
	     state_mkFSMstate == 3'd3 ||
	     WILL_FIRE_RL_action_l24c11 ||
	     WILL_FIRE_RL_action_l23c10 ||
	     WILL_FIRE_RL_action_l22c15 ;

  // register connection_letterOffset
  assign connection_letterOffset$D_IN =
	     (mem$get0[4:0] != 5'd26 && mem$get0[4:0] != 5'd27 &&
	      mem$get0[4:0] != 5'd28) ?
	       ((mem$get1[4:0] == 5'd27) ? 6'd0 : x__h1273) :
	       6'd0 ;
  assign connection_letterOffset$EN =
	     WILL_FIRE_RL_connection_directMemConnections &&
	     (mem$get0[4:0] != 5'd26 && mem$get0[4:0] != 5'd27 &&
	      mem$get1[4:0] != 5'd26 &&
	      (mem$get1[4:0] == 5'd27 || connection_word_counter == 11'd0) ||
	      mem$get0[4:0] == 5'd28) ;

  // register connection_letter_counter
  assign connection_letter_counter$D_IN = x__h1597 ;
  assign connection_letter_counter$EN =
	     WILL_FIRE_RL_connection_directMemConnections ;

  // register connection_state
  always@(MUX_connection_state$write_1__SEL_1 or
	  WILL_FIRE_RL_connection_dumpMem or WILL_FIRE_RL_action_l22c15)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_connection_state$write_1__SEL_1: connection_state$D_IN = 3'd0;
      WILL_FIRE_RL_connection_dumpMem: connection_state$D_IN = 3'd1;
      WILL_FIRE_RL_action_l22c15: connection_state$D_IN = 3'd3;
      default: connection_state$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign connection_state$EN =
	     WILL_FIRE_RL_connection_directMemConnections &&
	     mem$get0[4:0] == 5'd28 ||
	     WILL_FIRE_RL_connection_dumpMem ||
	     WILL_FIRE_RL_action_l22c15 ;

  // register connection_wordTypeAddr
  assign connection_wordTypeAddr$D_IN = connection_letter_counter ;
  assign connection_wordTypeAddr$EN =
	     WILL_FIRE_RL_connection_directMemConnections &&
	     mem$get0[4:0] != 5'd26 &&
	     mem$get0[4:0] != 5'd27 &&
	     mem$get0[4:0] != 5'd28 &&
	     mem$get1[4:0] == 5'd26 &&
	     connection_word_counter == 11'd0 ;

  // register connection_word_counter
  assign connection_word_counter$D_IN =
	     (mem$get0[4:0] != 5'd26 && mem$get0[4:0] != 5'd27 &&
	      mem$get0[4:0] != 5'd28) ?
	       ((mem$get1[4:0] == 5'd26) ? x__h787 : 11'd0) :
	       11'd0 ;
  assign connection_word_counter$EN =
	     WILL_FIRE_RL_connection_directMemConnections &&
	     (mem$get0[4:0] != 5'd26 && mem$get0[4:0] != 5'd27 &&
	      (mem$get1[4:0] == 5'd26 || mem$get1[4:0] == 5'd27) ||
	      mem$get0[4:0] == 5'd28) ;

  // register jj_delay_count
  assign jj_delay_count$D_IN =
	     WILL_FIRE_RL_action_np ?
	       MUX_jj_delay_count$write_1__VAL_1 :
	       8'd0 ;
  assign jj_delay_count$EN =
	     WILL_FIRE_RL_action_np || state_mkFSMstate == 3'd3 ;

  // register probTb_nextAddr
  assign probTb_nextAddr$D_IN =
	     mem$get3[19] ?
	       mem$get3[18:5] :
	       IF_probTb_nextAddrOffset_67_BIT_14_68_THEN_IF__ETC___d383 ;
  assign probTb_nextAddr$EN = WILL_FIRE_RL_probTb_movingDown ;

  // register probTb_nextAddrOffset
  assign probTb_nextAddrOffset$D_IN =
	     { mem$get3[19], probTb_nextAddr_58_PLUS_2___d371 } ;
  assign probTb_nextAddrOffset$EN =
	     WILL_FIRE_RL_probTb_movingDown &&
	     (mem$get3[19] &&
	      (mem$get2[4:0] == 5'd28 || mem$get2[4:0] == 5'd27) ||
	      !mem$get3[19] && probTb_nextAddrOffset[14]) ;

  // register probTb_previousLetter
  assign probTb_previousLetter$D_IN = mem$get2[4:0] ;
  assign probTb_previousLetter$EN =
	     WILL_FIRE_RL_probTb_movingDown && mem$get3[19] ;

  // register probTb_resetAddr
  assign probTb_resetAddr$D_IN =
	     (mem$get3[19] && mem$get2[4:0] == 5'd26) ?
	       { 1'd1, probTb_nextAddr_58_PLUS_2___d371 } :
	       15'd10922 ;
  assign probTb_resetAddr$EN =
	     WILL_FIRE_RL_probTb_movingDown && mem$get3[19] &&
	     (mem$get2[4:0] == 5'd26 || mem$get2[4:0] == 5'd28 ||
	      mem$get2[4:0] == 5'd27) ;

  // register probTb_state
  assign probTb_state$D_IN = 3'd4 ;
  assign probTb_state$EN = WILL_FIRE_RL_action_l24c11 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas__00_AND_abort_wget__01_02_OR_state__ETC___d470 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(MUX_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_action_l22c15 or
	  WILL_FIRE_RL_action_l23c10 or
	  WILL_FIRE_RL_action_l24c11 or
	  state_mkFSMstate or WILL_FIRE_RL_action_np)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_mkFSMstate$write_1__SEL_1: state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_action_l22c15: state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_action_l23c10: state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_action_l24c11: state_mkFSMstate$D_IN = 3'd3;
      state_mkFSMstate == 3'd3: state_mkFSMstate$D_IN = 3'd4;
      WILL_FIRE_RL_action_np: state_mkFSMstate$D_IN = 3'd5;
      default: state_mkFSMstate$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l21c13_1 || WILL_FIRE_RL_idle_l21c13 ||
	     WILL_FIRE_RL_action_l22c15 ||
	     WILL_FIRE_RL_action_l23c10 ||
	     WILL_FIRE_RL_action_l24c11 ||
	     state_mkFSMstate == 3'd3 ||
	     WILL_FIRE_RL_action_np ;

  // submodule mem
  assign mem$get0_addr = connection_letter_counter ;
  assign mem$get1_addr = x__h1597 ;
  assign mem$get2_addr = probTb_nextAddr + 14'd1 ;
  assign mem$get3_addr = probTb_nextAddr ;
  assign mem$put_memReq =
	     MUX_mem$put_1__SEL_1 ?
	       MUX_mem$put_1__VAL_1 :
	       MUX_mem$put_1__VAL_2 ;
  assign mem$EN_put =
	     WILL_FIRE_RL_connection_directMemConnections &&
	     NOT_mem_get0_connection_letter_counter_BITS_4__ETC___d53 ||
	     WILL_FIRE_RL_probTb_movingDown && mem$get3[19] &&
	     (probTb_previousLetter == 5'd26 ||
	      probTb_previousLetter == 5'd27) ;
  assign mem$EN_nodeDump = WILL_FIRE_RL_connection_dumpMem ;

  // remaining internal signals
  assign IF_probTb_nextAddrOffset_67_BIT_14_68_THEN_IF__ETC___d383 =
	     probTb_nextAddrOffset[14] ?
	       probTb_nextAddrOffset[13:0] :
	       (probTb_resetAddr[14] ?
		  probTb_resetAddr[13:0] :
		  probTb_nextAddr_58_PLUS_2___d371) ;
  assign NOT_mem_get0_connection_letter_counter_BITS_4__ETC___d53 =
	     mem$get0[4:0] != 5'd26 && mem$get0[4:0] != 5'd27 &&
	     mem$get0[4:0] != 5'd28 &&
	     (mem$get1[4:0] == 5'd26 && connection_word_counter != 11'd0 ||
	      mem$get1[4:0] != 5'd26 &&
	      (connection_word_counter != 11'd0 || mem$get1[4:0] != 5'd27)) ;
  assign NOT_mem_get3_probTb_nextAddr_58_59_BIT_19_60_6_ETC___d271 =
	     !mem$get3[19] ||
	     mem$RDY_get2 &&
	     (probTb_previousLetter != 5'd26 &&
	      probTb_previousLetter != 5'd27 ||
	      mem$RDY_put) ;
  assign abort_whas__00_AND_abort_wget__01_02_OR_state__ETC___d470 =
	     (state_mkFSMstate == 3'd0 ||
	      jj_delay_count == 8'd189 && state_mkFSMstate == 3'd4 ||
	      jj_delay_count == 8'd189 && state_mkFSMstate == 3'd5) &&
	     (!start_reg_1 || state_fired) ;
  assign connection_wordTypeAddr_4_MINUS_0_CONCAT_conne_ETC___d56 =
	     connection_wordTypeAddr - { 8'd0, connection_letterOffset } ;
  assign mem_RDY_get1__0_AND_IF_mem_get1_connection_let_ETC___d22 =
	     mem$RDY_get1 &&
	     CASE_memget1_BITS_4_TO_0_26_connection_word_c_ETC__q1 ;
  assign probTb_nextAddr_58_PLUS_2___d371 = probTb_nextAddr + 14'd2 ;
  assign x__h1273 = connection_letterOffset + 6'd1 ;
  assign x__h1597 = connection_letter_counter + 14'd1 ;
  assign x__h2242 = mem$get3[26:20] + 7'd1 ;
  assign x__h787 = connection_word_counter + 11'd1 ;
  always@(mem$get1 or mem$RDY_put or connection_word_counter)
  begin
    case (mem$get1[4:0])
      5'd26, 5'd27:
	  CASE_memget1_BITS_4_TO_0_26_connection_word_c_ETC__q1 =
	      connection_word_counter == 11'd0 || mem$RDY_put;
      default: CASE_memget1_BITS_4_TO_0_26_connection_word_c_ETC__q1 =
		   mem$RDY_put;
    endcase
  end
  always@(mem$get1 or
	  x__h1597 or
	  connection_wordTypeAddr_4_MINUS_0_CONCAT_conne_ETC___d56)
  begin
    case (mem$get1[4:0])
      5'd26, 5'd27:
	  CASE_memget1_BITS_4_TO_0_26_connection_wordTy_ETC__q2 =
	      connection_wordTypeAddr_4_MINUS_0_CONCAT_conne_ETC___d56;
      default: CASE_memget1_BITS_4_TO_0_26_connection_wordTy_ETC__q2 =
		   x__h1597;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        connection_letterOffset <= `BSV_ASSIGNMENT_DELAY 6'd0;
	connection_letter_counter <= `BSV_ASSIGNMENT_DELAY 14'd0;
	connection_state <= `BSV_ASSIGNMENT_DELAY 3'd1;
	connection_wordTypeAddr <= `BSV_ASSIGNMENT_DELAY 14'd0;
	connection_word_counter <= `BSV_ASSIGNMENT_DELAY 11'd0;
	jj_delay_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	probTb_nextAddr <= `BSV_ASSIGNMENT_DELAY 14'd0;
	probTb_nextAddrOffset <= `BSV_ASSIGNMENT_DELAY 15'd10922;
	probTb_previousLetter <= `BSV_ASSIGNMENT_DELAY 5'd0;
	probTb_resetAddr <= `BSV_ASSIGNMENT_DELAY 15'd10922;
	probTb_state <= `BSV_ASSIGNMENT_DELAY 3'd1;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (connection_letterOffset$EN)
	  connection_letterOffset <= `BSV_ASSIGNMENT_DELAY
	      connection_letterOffset$D_IN;
	if (connection_letter_counter$EN)
	  connection_letter_counter <= `BSV_ASSIGNMENT_DELAY
	      connection_letter_counter$D_IN;
	if (connection_state$EN)
	  connection_state <= `BSV_ASSIGNMENT_DELAY connection_state$D_IN;
	if (connection_wordTypeAddr$EN)
	  connection_wordTypeAddr <= `BSV_ASSIGNMENT_DELAY
	      connection_wordTypeAddr$D_IN;
	if (connection_word_counter$EN)
	  connection_word_counter <= `BSV_ASSIGNMENT_DELAY
	      connection_word_counter$D_IN;
	if (jj_delay_count$EN)
	  jj_delay_count <= `BSV_ASSIGNMENT_DELAY jj_delay_count$D_IN;
	if (probTb_nextAddr$EN)
	  probTb_nextAddr <= `BSV_ASSIGNMENT_DELAY probTb_nextAddr$D_IN;
	if (probTb_nextAddrOffset$EN)
	  probTb_nextAddrOffset <= `BSV_ASSIGNMENT_DELAY
	      probTb_nextAddrOffset$D_IN;
	if (probTb_previousLetter$EN)
	  probTb_previousLetter <= `BSV_ASSIGNMENT_DELAY
	      probTb_previousLetter$D_IN;
	if (probTb_resetAddr$EN)
	  probTb_resetAddr <= `BSV_ASSIGNMENT_DELAY probTb_resetAddr$D_IN;
	if (probTb_state$EN)
	  probTb_state <= `BSV_ASSIGNMENT_DELAY probTb_state$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    connection_letterOffset = 6'h2A;
    connection_letter_counter = 14'h2AAA;
    connection_state = 3'h2;
    connection_wordTypeAddr = 14'h2AAA;
    connection_word_counter = 11'h2AA;
    jj_delay_count = 8'hAA;
    probTb_nextAddr = 14'h2AAA;
    probTb_nextAddrOffset = 15'h2AAA;
    probTb_previousLetter = 5'h0A;
    probTb_resetAddr = 15'h2AAA;
    probTb_state = 3'h2;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l23c10 &&
	  (WILL_FIRE_RL_action_l24c11 || state_mkFSMstate == 3'd3 ||
	   WILL_FIRE_RL_action_np))
	$display("Error: \"Tests.bsv\", line 23, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l23c10] and\n  [RL_action_l24c11, RL_action_d_init_np, RL_action_np] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l24c11 &&
	  (state_mkFSMstate == 3'd3 || WILL_FIRE_RL_action_np))
	$display("Error: \"Tests.bsv\", line 24, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l24c11] and\n  [RL_action_d_init_np, RL_action_np] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 3'd3 && WILL_FIRE_RL_action_np)
	$display("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_d_init_np] and\n  [RL_action_np] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l22c15 &&
	  (WILL_FIRE_RL_action_l23c10 || WILL_FIRE_RL_action_l24c11 ||
	   state_mkFSMstate == 3'd3 ||
	   WILL_FIRE_RL_action_np))
	$display("Error: \"Tests.bsv\", line 22, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l22c15] and\n  [RL_action_l23c10, RL_action_l24c11, RL_action_d_init_np, RL_action_np] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas__00_AND_abort_wget__01_02_OR_state__ETC___d470 &&
	  !start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get0[4:0] != 5'd26 &&
	  mem$get0[4:0] != 5'd27 &&
	  mem$get0[4:0] != 5'd28 &&
	  mem$get1[4:0] == 5'd26)
	$write("Data output from End of Word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd0)
	$write("A");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd1)
	$write("B");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd2)
	$write("C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd3)
	$write("D");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd4)
	$write("E");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd5)
	$write("F");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd6)
	$write("G");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd7)
	$write("H");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd8)
	$write("I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd9)
	$write("J");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd10)
	$write("K");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd11)
	$write("L");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd12)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd13)
	$write("N");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd14)
	$write("O");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd15)
	$write("P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd16)
	$write("Q");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd17)
	$write("R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd18)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd19)
	$write("T");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd20)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd21)
	$write("V");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd22)
	$write("W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd23)
	$write("X");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd24)
	$write("Y");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] == 5'd25)
	$write("Z");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get0[4:0] != 5'd26 &&
	  mem$get0[4:0] != 5'd27 &&
	  mem$get0[4:0] != 5'd28 &&
	  mem$get1[4:0] == 5'd26 &&
	  mem$get0[4:0] != 5'd0 &&
	  mem$get0[4:0] != 5'd1 &&
	  mem$get0[4:0] != 5'd2 &&
	  mem$get0[4:0] != 5'd3 &&
	  mem$get0[4:0] != 5'd4 &&
	  mem$get0[4:0] != 5'd5 &&
	  mem$get0[4:0] != 5'd6 &&
	  mem$get0[4:0] != 5'd7 &&
	  mem$get0[4:0] != 5'd8 &&
	  mem$get0[4:0] != 5'd9 &&
	  mem$get0[4:0] != 5'd10 &&
	  mem$get0[4:0] != 5'd11 &&
	  mem$get0[4:0] != 5'd12 &&
	  mem$get0[4:0] != 5'd13 &&
	  mem$get0[4:0] != 5'd14 &&
	  mem$get0[4:0] != 5'd15 &&
	  mem$get0[4:0] != 5'd16 &&
	  mem$get0[4:0] != 5'd17 &&
	  mem$get0[4:0] != 5'd18 &&
	  mem$get0[4:0] != 5'd19 &&
	  mem$get0[4:0] != 5'd20 &&
	  mem$get0[4:0] != 5'd21 &&
	  mem$get0[4:0] != 5'd22 &&
	  mem$get0[4:0] != 5'd23 &&
	  mem$get0[4:0] != 5'd24 &&
	  mem$get0[4:0] != 5'd25)
	$write("EscapeMem");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get0[4:0] != 5'd26 &&
	  mem$get0[4:0] != 5'd27 &&
	  mem$get0[4:0] != 5'd28 &&
	  mem$get1[4:0] == 5'd26)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get0[4:0] != 5'd26 &&
	  mem$get0[4:0] != 5'd27 &&
	  mem$get0[4:0] != 5'd28 &&
	  mem$get1[4:0] == 5'd27)
	$write("Data Output from End of sentence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd0)
	$write("A");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd1)
	$write("B");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd2)
	$write("C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd3)
	$write("D");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd4)
	$write("E");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd5)
	$write("F");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd6)
	$write("G");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd7)
	$write("H");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd8)
	$write("I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd9)
	$write("J");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd10)
	$write("K");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd11)
	$write("L");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd12)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd13)
	$write("N");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd14)
	$write("O");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd15)
	$write("P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd16)
	$write("Q");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd17)
	$write("R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd18)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd19)
	$write("T");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd20)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd21)
	$write("V");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd22)
	$write("W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd23)
	$write("X");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd24)
	$write("Y");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] == 5'd25)
	$write("Z");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get0[4:0] != 5'd26 &&
	  mem$get0[4:0] != 5'd27 &&
	  mem$get0[4:0] != 5'd28 &&
	  mem$get1[4:0] == 5'd27 &&
	  mem$get0[4:0] != 5'd0 &&
	  mem$get0[4:0] != 5'd1 &&
	  mem$get0[4:0] != 5'd2 &&
	  mem$get0[4:0] != 5'd3 &&
	  mem$get0[4:0] != 5'd4 &&
	  mem$get0[4:0] != 5'd5 &&
	  mem$get0[4:0] != 5'd6 &&
	  mem$get0[4:0] != 5'd7 &&
	  mem$get0[4:0] != 5'd8 &&
	  mem$get0[4:0] != 5'd9 &&
	  mem$get0[4:0] != 5'd10 &&
	  mem$get0[4:0] != 5'd11 &&
	  mem$get0[4:0] != 5'd12 &&
	  mem$get0[4:0] != 5'd13 &&
	  mem$get0[4:0] != 5'd14 &&
	  mem$get0[4:0] != 5'd15 &&
	  mem$get0[4:0] != 5'd16 &&
	  mem$get0[4:0] != 5'd17 &&
	  mem$get0[4:0] != 5'd18 &&
	  mem$get0[4:0] != 5'd19 &&
	  mem$get0[4:0] != 5'd20 &&
	  mem$get0[4:0] != 5'd21 &&
	  mem$get0[4:0] != 5'd22 &&
	  mem$get0[4:0] != 5'd23 &&
	  mem$get0[4:0] != 5'd24 &&
	  mem$get0[4:0] != 5'd25)
	$write("EscapeMem");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get0[4:0] != 5'd26 &&
	  mem$get0[4:0] != 5'd27 &&
	  mem$get0[4:0] != 5'd28 &&
	  mem$get1[4:0] == 5'd27)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get0[4:0] != 5'd26 &&
	  mem$get0[4:0] != 5'd27 &&
	  mem$get0[4:0] != 5'd28 &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27)
	$write("Data Output: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd0)
	$write("A");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd1)
	$write("B");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd2)
	$write("C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd3)
	$write("D");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd4)
	$write("E");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd5)
	$write("F");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd6)
	$write("G");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd7)
	$write("H");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd8)
	$write("I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd9)
	$write("J");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd10)
	$write("K");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd11)
	$write("L");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd12)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd13)
	$write("N");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd14)
	$write("O");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd15)
	$write("P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd16)
	$write("Q");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd17)
	$write("R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd18)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd19)
	$write("T");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd20)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd21)
	$write("V");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd22)
	$write("W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd23)
	$write("X");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd24)
	$write("Y");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] == 5'd25)
	$write("Z");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get0[4:0] != 5'd26 &&
	  mem$get0[4:0] != 5'd27 &&
	  mem$get0[4:0] != 5'd28 &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27 &&
	  mem$get0[4:0] != 5'd0 &&
	  mem$get0[4:0] != 5'd1 &&
	  mem$get0[4:0] != 5'd2 &&
	  mem$get0[4:0] != 5'd3 &&
	  mem$get0[4:0] != 5'd4 &&
	  mem$get0[4:0] != 5'd5 &&
	  mem$get0[4:0] != 5'd6 &&
	  mem$get0[4:0] != 5'd7 &&
	  mem$get0[4:0] != 5'd8 &&
	  mem$get0[4:0] != 5'd9 &&
	  mem$get0[4:0] != 5'd10 &&
	  mem$get0[4:0] != 5'd11 &&
	  mem$get0[4:0] != 5'd12 &&
	  mem$get0[4:0] != 5'd13 &&
	  mem$get0[4:0] != 5'd14 &&
	  mem$get0[4:0] != 5'd15 &&
	  mem$get0[4:0] != 5'd16 &&
	  mem$get0[4:0] != 5'd17 &&
	  mem$get0[4:0] != 5'd18 &&
	  mem$get0[4:0] != 5'd19 &&
	  mem$get0[4:0] != 5'd20 &&
	  mem$get0[4:0] != 5'd21 &&
	  mem$get0[4:0] != 5'd22 &&
	  mem$get0[4:0] != 5'd23 &&
	  mem$get0[4:0] != 5'd24 &&
	  mem$get0[4:0] != 5'd25)
	$write("EscapeMem");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get0[4:0] != 5'd26 &&
	  mem$get0[4:0] != 5'd27 &&
	  mem$get0[4:0] != 5'd28 &&
	  mem$get1[4:0] != 5'd26 &&
	  mem$get1[4:0] != 5'd27)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_connection_directMemConnections &&
	  mem$get0[4:0] == 5'd28)
	$display("Finished Connections");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown) $write("The letter is ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd0)
	$write("A");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd1)
	$write("B");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd2)
	$write("C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd3)
	$write("D");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd4)
	$write("E");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd5)
	$write("F");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd6)
	$write("G");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd7)
	$write("H");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd8)
	$write("I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd9)
	$write("J");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd10)
	$write("K");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd11)
	$write("L");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd12)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd13)
	$write("N");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd14)
	$write("O");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd15)
	$write("P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd16)
	$write("Q");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd17)
	$write("R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd18)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd19)
	$write("T");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd20)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd21)
	$write("V");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd22)
	$write("W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd23)
	$write("X");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd24)
	$write("Y");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd25)
	$write("Z");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd26)
	$write("EscapeWord");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] == 5'd27)
	$write("EscapeState");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[4:0] != 5'd0 &&
	  mem$get3[4:0] != 5'd1 &&
	  mem$get3[4:0] != 5'd2 &&
	  mem$get3[4:0] != 5'd3 &&
	  mem$get3[4:0] != 5'd4 &&
	  mem$get3[4:0] != 5'd5 &&
	  mem$get3[4:0] != 5'd6 &&
	  mem$get3[4:0] != 5'd7 &&
	  mem$get3[4:0] != 5'd8 &&
	  mem$get3[4:0] != 5'd9 &&
	  mem$get3[4:0] != 5'd10 &&
	  mem$get3[4:0] != 5'd11 &&
	  mem$get3[4:0] != 5'd12 &&
	  mem$get3[4:0] != 5'd13 &&
	  mem$get3[4:0] != 5'd14 &&
	  mem$get3[4:0] != 5'd15 &&
	  mem$get3[4:0] != 5'd16 &&
	  mem$get3[4:0] != 5'd17 &&
	  mem$get3[4:0] != 5'd18 &&
	  mem$get3[4:0] != 5'd19 &&
	  mem$get3[4:0] != 5'd20 &&
	  mem$get3[4:0] != 5'd21 &&
	  mem$get3[4:0] != 5'd22 &&
	  mem$get3[4:0] != 5'd23 &&
	  mem$get3[4:0] != 5'd24 &&
	  mem$get3[4:0] != 5'd25 &&
	  mem$get3[4:0] != 5'd26 &&
	  mem$get3[4:0] != 5'd27)
	$write("EscapeMem");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[19] &&
	  (probTb_previousLetter == 5'd26 || probTb_previousLetter == 5'd27))
	$display("Changed Activation Energy");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[19] &&
	  mem$get2[4:0] == 5'd26)
	$display("New Word Detected");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && mem$get3[19] &&
	  (mem$get2[4:0] == 5'd28 || mem$get2[4:0] == 5'd27))
	$display("New statement detected");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_probTb_movingDown && !mem$get3[19])
	$display("No connection");
  end
  // synopsys translate_on
endmodule  // mkTest

