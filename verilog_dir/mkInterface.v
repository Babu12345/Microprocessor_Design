//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Mon May 28 14:26:30 UTC 2018
//
//
// Ports:
// Name                         I/O  size props
// outputNode0                    O     5
// RDY_outputNode0                O     1
// outputNode1                    O     5
// RDY_outputNode1                O     1
// outputNodeData                 O    34
// RDY_outputNodeData             O     1
// RDY_dumpMem                    O     1
// inputNode                      O     5
// RDY_inputNode                  O     1
// dumpComplete                   O     1
// RDY_dumpComplete               O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// outputNode0_current_addr       I    14
// outputNode1_current_addr       I    14
// outputNodeData_current_addr    I    14
// inputNode_data                 I    55
// EN_dumpMem                     I     1
// EN_inputNode                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkInterface(CLK,
		   RST_N,

		   outputNode0_current_addr,
		   outputNode0,
		   RDY_outputNode0,

		   outputNode1_current_addr,
		   outputNode1,
		   RDY_outputNode1,

		   outputNodeData_current_addr,
		   outputNodeData,
		   RDY_outputNodeData,

		   EN_dumpMem,
		   RDY_dumpMem,

		   inputNode_data,
		   EN_inputNode,
		   inputNode,
		   RDY_inputNode,

		   dumpComplete,
		   RDY_dumpComplete);
  input  CLK;
  input  RST_N;

  // value method outputNode0
  input  [13 : 0] outputNode0_current_addr;
  output [4 : 0] outputNode0;
  output RDY_outputNode0;

  // value method outputNode1
  input  [13 : 0] outputNode1_current_addr;
  output [4 : 0] outputNode1;
  output RDY_outputNode1;

  // value method outputNodeData
  input  [13 : 0] outputNodeData_current_addr;
  output [33 : 0] outputNodeData;
  output RDY_outputNodeData;

  // action method dumpMem
  input  EN_dumpMem;
  output RDY_dumpMem;

  // actionvalue method inputNode
  input  [54 : 0] inputNode_data;
  input  EN_inputNode;
  output [4 : 0] inputNode;
  output RDY_inputNode;

  // value method dumpComplete
  output dumpComplete;
  output RDY_dumpComplete;

  // signals for module outputs
  wire [33 : 0] outputNodeData;
  wire [4 : 0] inputNode, outputNode0, outputNode1;
  wire RDY_dumpComplete,
       RDY_dumpMem,
       RDY_inputNode,
       RDY_outputNode0,
       RDY_outputNode1,
       RDY_outputNodeData,
       dumpComplete;

  // ports of submodule mem
  wire [54 : 0] mem$put_memReq;
  wire [33 : 0] mem$get0, mem$get1, mem$get2, mem$put;
  wire [13 : 0] mem$get0_addr, mem$get1_addr, mem$get2_addr;
  wire mem$EN_nodeDump,
       mem$EN_put,
       mem$RDY_get0,
       mem$RDY_get1,
       mem$RDY_get2,
       mem$RDY_nodeDump,
       mem$RDY_put,
       mem$dumpCompletion;

  // value method outputNode0
  assign outputNode0 = mem$get0[4:0] ;
  assign RDY_outputNode0 = mem$RDY_get0 ;

  // value method outputNode1
  assign outputNode1 = mem$get1[4:0] ;
  assign RDY_outputNode1 = mem$RDY_get1 ;

  // value method outputNodeData
  assign outputNodeData = mem$get2 ;
  assign RDY_outputNodeData = mem$RDY_get2 ;

  // action method dumpMem
  assign RDY_dumpMem = mem$RDY_nodeDump ;

  // actionvalue method inputNode
  assign inputNode = mem$put[4:0] ;
  assign RDY_inputNode = mem$RDY_put ;

  // value method dumpComplete
  assign dumpComplete = mem$dumpCompletion ;
  assign RDY_dumpComplete = 1'd1 ;

  // submodule mem
  mkMagicMemory mem(.CLK(CLK),
		    .RST_N(RST_N),
		    .get0_addr(mem$get0_addr),
		    .get1_addr(mem$get1_addr),
		    .get2_addr(mem$get2_addr),
		    .put_memReq(mem$put_memReq),
		    .EN_put(mem$EN_put),
		    .EN_nodeDump(mem$EN_nodeDump),
		    .put(mem$put),
		    .RDY_put(mem$RDY_put),
		    .get0(mem$get0),
		    .RDY_get0(mem$RDY_get0),
		    .get1(mem$get1),
		    .RDY_get1(mem$RDY_get1),
		    .get2(mem$get2),
		    .RDY_get2(mem$RDY_get2),
		    .RDY_nodeDump(mem$RDY_nodeDump),
		    .dumpCompletion(mem$dumpCompletion),
		    .RDY_dumpCompletion());

  // submodule mem
  assign mem$get0_addr = outputNode0_current_addr ;
  assign mem$get1_addr = outputNode1_current_addr ;
  assign mem$get2_addr = outputNodeData_current_addr ;
  assign mem$put_memReq = inputNode_data ;
  assign mem$EN_put = EN_inputNode ;
  assign mem$EN_nodeDump = EN_dumpMem ;
endmodule  // mkInterface

