/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Sun Nov  4 02:50:21 UTC 2018
 * 
 */

/* Generation options: */
#ifndef __mkTest_h__
#define __mkTest_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkMagicMemory.h"


/* Class declaration for the mkTest module */
class MOD_mkTest : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_abort;
  MOD_Reg<tUInt8> INST_connection_letterOffset;
  MOD_Reg<tUInt32> INST_connection_letter_counter;
  MOD_Reg<tUInt8> INST_connection_state;
  MOD_Reg<tUInt32> INST_connection_wordTypeAddr;
  MOD_Reg<tUInt32> INST_connection_word_counter;
  MOD_ConfigReg<tUInt8> INST_jj_delay_count;
  MOD_mkMagicMemory INST_mem;
  MOD_Reg<tUInt32> INST_probTb_nextAddr;
  MOD_Reg<tUInt32> INST_probTb_nextAddrOffset;
  MOD_Reg<tUInt8> INST_probTb_previousLetter;
  MOD_Reg<tUInt32> INST_probTb_resetAddr;
  MOD_Reg<tUInt8> INST_probTb_state;
  MOD_Reg<tUInt8> INST_running;
  MOD_Reg<tUInt8> INST_start_reg;
  MOD_Reg<tUInt8> INST_start_reg_1;
  MOD_Wire<tUInt8> INST_start_reg_2;
  MOD_Wire<tUInt8> INST_start_wire;
  MOD_Reg<tUInt8> INST_state_can_overlap;
  MOD_Reg<tUInt8> INST_state_fired;
  MOD_Wire<tUInt8> INST_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_state_overlap_pw;
  MOD_Wire<tUInt8> INST_state_set_pw;
 
 /* Constructor */
 public:
  MOD_mkTest(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_action_np;
  tUInt8 DEF_WILL_FIRE_RL_action_d_init_np;
  tUInt8 DEF_WILL_FIRE_RL_action_l24c11;
  tUInt8 DEF_WILL_FIRE_RL_action_l23c10;
  tUInt8 DEF_WILL_FIRE_RL_action_l22c15;
  tUInt8 DEF_mem_get0_connection_letter_counter_BITS_4_TO_0___d4;
  tUInt8 DEF_mem_get1_connection_letter_counter_PLUS_1_1_2__ETC___d13;
  tUInt32 DEF_x__h1255;
  tUInt64 DEF_mem_get3_probTb_nextAddr_58___d259;
  tUInt32 DEF_x__h2788;
  tUInt32 DEF_x__h1597;
  tUInt32 DEF_x__h1601;
  tUInt8 DEF_jj_delay_count_read____d434;
  tUInt8 DEF_probTb_previousLetter__h2114;
  tUInt8 DEF_mem_get3_probTb_nextAddr_58_59_BIT_19___d260;
  tUInt8 DEF_connection_word_counter_7_EQ_0___d18;
  tUInt8 DEF_probTb_previousLetter_63_EQ_27___d266;
  tUInt8 DEF_probTb_previousLetter_63_EQ_26___d264;
  tUInt8 DEF_mem_get0_connection_letter_counter_BITS_4_TO_0_ETC___d8;
  tUInt8 DEF_mem_get0_connection_letter_counter_BITS_4_TO_0_ETC___d6;
  tUInt8 DEF_mem_get0_connection_letter_counter_BITS_4_TO_0_ETC___d5;
  tUInt8 DEF_NOT_mem_get3_probTb_nextAddr_58_59_BIT_19_60___d261;
 
 /* Local definitions */
 private:
 
 /* Rules */
 public:
  void RL_connection_directMemConnections();
  void RL_connection_dumpMem();
  void RL_probTb_movingDown();
  void RL_start_reg__dreg_update();
  void RL_state_handle_abort();
  void RL_state_fired__dreg_update();
  void RL_state_every();
  void RL_restart();
  void RL_action_l22c15();
  void RL_action_l23c10();
  void RL_action_l24c11();
  void RL_action_d_init_np();
  void RL_action_np();
  void RL_idle_l21c13();
  void RL_idle_l21c13_1();
  void RL_fsm_start();
  void RL_auto_start();
  void RL_auto_finish();
  void __me_check_8();
  void __me_check_9();
  void __me_check_10();
  void __me_check_11();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTest &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTest &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTest &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTest &backing);
};

#endif /* ifndef __mkTest_h__ */
